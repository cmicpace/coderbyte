//This is where the code challengers started to get a little difficult, so I thought I would document my progress as I move forward with the JavaScript path.

//Expressions Inside Arrays

//The folks over at Poplar Puzzlers need an array of functions for one of their puzzles. They’ve requested your help in making the array, which they would like to be called puzzlers. The cells of the array should each contain a function, and these functions–well, what they return–are listed here in order. Each function has one parameter. Note input below represents the parameter, and you will need to convert the math formulas to JavaScript:

//Returns 3 * input - 8
//Returns (input + 2) * (input + 2) * (input + 2)
//Returns (input * input) - 9
//Returns input % 4

//Use your knowledge of arrays and anonymous function expressions to build this array of functions.

//Note: Use parentheses with your return statements if you’re having trouble with the order of operations.

//This was actually a lot easier than I expected it to be upon first glance.  I'll try to break it down into parts.

//Part 1:  Create an array and assignt it to var puzzlers
//var puzzlers = [];

//Part 2:  Create four functions that are placed in each part of the array
//var puzzlers = [function(){}, function(){}, function(){}, function()]{};

//Part 3:  Add the input parameter to each function expression and the return statement
//var puzzlers = [function(input){return}, function(input){return}, function(input){return}, function(input){return}];

//Part 4:  Write in each return statement that the required for each cell within the array.  I'll write out the complete code here.

var puzzlers = [
  function(input) {
    return 3 * input - 8;
  },
  function(input) {
    return (input + 2) * (input + 2) * (input + 2);
  },
  function(input) {
    return (input * input) - 9;
  },
  function(input) {
    return input % 4;
  }
];













//This is where the code challengers started to get a little difficult, so I thought I would document my progress as I move forward with the JavaScript path.

//Expressions Inside Arrays

//The folks over at Poplar Puzzlers need an array of functions for one of their puzzles. They’ve requested your help in making the array, which they would like to be called puzzlers. The cells of the array should each contain a function, and these functions–well, what they return–are listed here in order. Each function has one parameter. Note input below represents the parameter, and you will need to convert the math formulas to JavaScript:

//Returns 3 * input - 8
//Returns (input + 2) * (input + 2) * (input + 2)
//Returns (input * input) - 9
//Returns input % 4

//Use your knowledge of arrays and anonymous function expressions to build this array of functions.

//Note: Use parentheses with your return statements if you’re having trouble with the order of operations.

//This was actually a lot easier than I expected it to be upon first glance.  I'll try to break it down into parts.

//Part 1:  Create an array and assignt it to var puzzlers
//var puzzlers = [];

//Part 2:  Create four functions that are placed in each part of the array
//var puzzlers = [function(){}, function(){}, function(){}, function()]{};

//Part 3:  Add the input parameter to each function expression and the return statement
//var puzzlers = [function(input){return}, function(input){return}, function(input){return}, function(input){return}];

//Part 4:  Write in each return statement that the required for each cell within the array.  I'll write out the complete code here.

var puzzlers = [
  function(input) {
    return 3 * input - 8;
  },
  function(input) {
    return (input + 2) * (input + 2) * (input + 2);
  },
  function(input) {
    return (input * input) - 9;
  },
  function(input) {
    return input % 4;
  }
];


//Choose Their Own Adventure

//Ash Adventures has three different “adventures” to choose from, and customers are prompted for a number at a terminal. The number is stored as userChoice and then passed into a function called adventureSelector.

//Inside the function, you need to return an anonymous function based on the number that the user selected. Each of your three anonymous functions should contain a boarding alert message:

//If the user selects 1:

//You selected the Vines of Doom!
//If the user selects 2:

//Looks like you want the Lake of Despair!
//If the user selects 3:

//The Caves of Catastrophe!
//Assume the user’s choice has already been stored as 1, 2, or 3, and is passed in as the userChoice parameter. Make sure that you return all message functions as anonymous functions, instead of stored in variables. You do not need to call the function at the end.



//The devs at Poplar Puzzles would like you to treat an array of functions like a Queue, passing the result of each function into the next until the Queue is empty. They’ve sent you the puzzlers Queue of functions, and the following instructions:

//Build a function and assign it to a variable named applyAndEmpty.
//The function should take in an input number and a queue of functions as parameters.
//Using a for loop, call the functions in the queue in order with the input number, where the results of each function becomes the next function’s input.
//Once done this loop, return from applyAndEmpty the final function’s result. Additionally, the queue should be empty at this point.
//Lastly, call the applyAndEmpty function using the provided start variable and the puzzlers Queue as arguments, and alert the result.







